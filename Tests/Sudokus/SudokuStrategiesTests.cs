using System.Diagnostics;
using Model.Core;
using Model.Core.Changes;
using Model.Sudokus;
using Model.Sudokus.Solver;
using Model.Sudokus.Solver.Strategies;
using Model.Sudokus.Solver.Strategies.BlossomLoops;
using Model.Sudokus.Solver.Strategies.BlossomLoops.BranchFinder;
using Model.Sudokus.Solver.Strategies.BlossomLoops.LoopFinders;
using Model.Sudokus.Solver.Strategies.BlossomLoops.Types;
using Model.Sudokus.Solver.Strategies.MultiSector;
using Model.Sudokus.Solver.Strategies.MultiSector.Searchers;
using Model.Sudokus.Solver.Strategies.Symmetry;
using Model.Sudokus.Solver.Strategies.UniquenessClueCover;
using Model.Sudokus.Solver.Strategies.UniquenessClueCover.PatternCollections.Bands;
using Model.Utility;
using Tests.Utility;

namespace Tests.Sudokus;

public class SudokuStrategiesTests
{
    private const bool AllowSpeedTests = true;
    
    private readonly SudokuSolver _solver = new();

    [TearDown]
    public void TearDown()
    {
        _solver.StrategyManager.ClearStrategies();
    }
    
    #region SimpleColoring
    
    [Test]
    public void SimpleColoringTwiceInSameUnitTest()
    {
        TestSudokuStrategyInstance(new SimpleColoringStrategy(),
            "05k088880h03k011210hk81121c005s00348c0032148g111c40c0h0911c00305g1210hc0030h05c0214811g188c021g111880h440c0311810h0503210941g1g105480h4881032111214803g111480h8105",
            new NumericChange(ChangeType.SolutionAddition, 7, 1, 4),
            new NumericChange(ChangeType.SolutionAddition, 7, 4, 3),
            new NumericChange(ChangeType.SolutionAddition, 7, 3, 8),
            new NumericChange(ChangeType.SolutionAddition, 7, 5, 0),
            new NumericChange(ChangeType.SolutionAddition, 7, 7, 2),
            new NumericChange(ChangeType.SolutionAddition, 7, 8, 5));
    }

    [Test]
    public void SimpleColoringTwoColoursElsewhereTest()
    {
        TestSudokuStrategyInstance(new SimpleColoringStrategy(),
            "05l8d8c80h03s018210hl8d821d005s00348c00321c8g158c41c0h0950d00305g1210hc0030h05c8214811g1c8c021g111c80h440c0311810h0503210941g1g105480h4881032111214803g158580h8105",
            new NumericChange(ChangeType.PossibilityRemoval, 8, 1, 2),
            new NumericChange(ChangeType.PossibilityRemoval, 8, 2, 3));
    }
    
    #endregion

    #region XYWing

    [Test]
    public void XYWingTest1()
    {
        TestSudokuStrategyInstance(new XYWingStrategy(),
            "g188aa050hca5090b0cg118g21g1c0050903ea05aa8211ca4gg1agaig1bi41228g09059g8i8g05g10911218i41aq41bq8g2205g19i9g8g21g11i050i9i41091103880o41g18g2105050o411q81211i1gg1",
            new NumericChange(ChangeType.PossibilityRemoval, 4, 6, 3),
            new NumericChange(ChangeType.PossibilityRemoval, 4, 6, 5));
    }

    [Test]
    public void XYWingTest2()
    {
        TestSudokuStrategyInstance(new XYWingStrategy(),
            "2111k8co4oso03480505g2812248i20h48110a0h4a11054a81g121gi09210m810ig41141gg81h04s215og4030o4105120qg11q21810o11410hg10305092181g8i005a811a8410h0381220a6o4o6o1105g1",
            new NumericChange(ChangeType.PossibilityRemoval, 6, 7, 3));
    }

    #endregion
    
    #region Band-Uniqueness

    [Test]
    public void BandUniquenessTest1()
    {
        TestSudokuStrategyInstance(new BandUniquenessStrategy(),
            "v009u0v0lg03bgug05v00h03v0l005b0u009v005u0v8lohobgug0305o211g8gq218o8o41sgs209k4kiggak11igkg21kglc81ho030sggq8p0q40hhcp841033003h0ikh8hc412s2s81cod0ck032198g10s1g",
            "- 336 436");
    }
    
    [Test]
    public void BandUniquenessTest2()
    {
        TestSudokuStrategyInstance(new BandUniquenessStrategy(),
            "o84124qc0hoaq4ie11o80311qc41o8q4ic0ho80h24qc11oau4meea058103k82111kgko481128k00ho8s803m8054g28kg03g8051181682105cg11o2sg094ic24g11coc88ecoek6mg103g1coc88c21ck11c0",
            "- 139 739");
    }
    
    #endregion

    #region BUG-Lite
    
    [Test]
    public void BugLiteTest1()
    {
        TestSudokuStrategyInstance(new BUGLiteStrategy(16),
            "41p0h021h494090h03820h2118588254g11405hahal00h12218150g2i2410hh409143481o8o80hh42114035c54112805810341gg28ggi205h252812ggg5009i841h81c1c2g8103gg0h1a811a58g1541421",
            new NumericChange(ChangeType.PossibilityRemoval, 9, 6, 0),
            new NumericChange(ChangeType.PossibilityRemoval, 9, 7, 0));
    }

    [Test]
    public void BugLiteTest2()
    {
        TestSudokuStrategyInstance(new BUGLiteStrategy(16),
            "41gg211103098gog050igq058121gg4111go11go8141gg050o0321092141g105118i8g0ig105110h81032868488g8g03210941g105112141g80311gg050o8105110h09418122i0g28282g805gg21114o4o",
            new NumericChange(ChangeType.PossibilityRemoval, 1, 1, 1),
            new NumericChange(ChangeType.PossibilityRemoval, 4, 1, 1));
    }

    [Test]
    public void BugLiteTest3()
    {
        TestSudokuStrategyInstance(new BUGLiteStrategy(16),
            "g121810k410k09110350090h810330g105605003053009g10h60810a84g14k8k4m2188110h413009o0308403g40a843030o40641o80h05h003k02188900h4881h009030k4k1460m4210h41g4118803o0gc",
            new NumericChange(ChangeType.PossibilityRemoval, 6, 7, 8),
            new NumericChange(ChangeType.PossibilityRemoval, 7, 7, 8));
    }

    [Test]
    public void BugLiteTest4()
    {
        TestSudokuStrategyInstance(new BUGLiteStrategy(16),
            "0309054g4g811121g1810h112109g1054242g16060051103810h0941222218810hg11c1409810hl0k4540350210511g14803210oc8cg2gg14a816k542o1e1m2g0582hiig0941929i1142ca4i6k442og18m",
            new NumericChange(ChangeType.PossibilityRemoval, 1, 8, 2),
            new NumericChange(ChangeType.PossibilityRemoval, 7, 8, 2));
    }

    [Test]
    public void BugLiteTest5()
    {
        TestSudokuStrategyInstance(new BUGLiteStrategy(18),
            "900h21g10984034114g105410h11038128289003092184410h14g109h00350218g05o04g05218103k0go11g84g41h00h1884oc28qaaa2181144803g8k00h140i48g1054g1168aaaa0i481481kg21k8140a",
            new NumericChange(ChangeType.PossibilityRemoval, 2, 5, 5),
            new NumericChange(ChangeType.PossibilityRemoval, 8, 5, 5));
    }

    /// <summary>
    /// Total: 9,5887 ms
    /// Average: 958,87 mis
    /// Minimum: 732,8 mis on try #8
    /// Maximum: 1,8244 ms on try #10
    /// Ignored: 1
    /// </summary>
    [Test]
    public void BugLiteSpeedTest()
    {
        TestSudokuStrategySpeed(new BUGLiteStrategy(16),
            "l8t8jcv406v2m8uoso0ht8j8v0u0v0m80305k0s2i6u4090hm0u011h8haha0hs005k2s82124ga41q811q80hocoa240h8103m0m8lclck8l8l8h8jc0hja81jcga8121holc06lalelskq0305hov8u0v8n8noko",
            10);
    }

    #endregion

    #region JuniorExocet

    [Test]
    public void JuniorExocetTest1()
    {
        TestSudokuStrategyInstance(new JuniorExocetStrategy(),
            "929241b205j29aoa0hg1099m9icg5i21c654219i9m09sglid6s6l4cqsioi8keo4k4611i005lghg3g037o48i081dad221g1c8540h464c9ibi09412g06g18k34cg05og2g11g8c8eo035inihi06g881544k7c",
            "- 424 237 737 111 112 124 137 514 516 517 523 529 532 533 536" +
            "814 817 818 823 828 832 833 835 552 556 591 592 599 841 842 845 881 888");
    }

    [Test]
    public void JuniorExocetTest2()
    {
        TestSudokuStrategyInstance(new JuniorExocetStrategy(),
            "haga05gi81goh821412141goh6gchc810kgapaoago2141gch80kgagagq21h4gshc4181g8c005g8c00321g8110hs8oo11s0gos8210305gc2103s4g4s40h4811gcg881kk11kk0348210h114109210305g181",
            "- 224 524 924 339");
    }

    [Test]
    public void JuniorExocetTest3()
    {
        TestSudokuStrategyInstance(new JuniorExocetStrategy(),
            "a4a011030h09a4g141qk41qgb094b403099g0903agg1d4f4b43g9g2g3o05411a123o81g1q0r8410hpcp438300303poog9021p01o4105qgqg0309p0rg41059g118g0905c0cgg103214105qgb0p2ri901g09",
            "- 524 537 637");
    }

    [Test]
    public void JuniorExocetTest4()
    {
        TestSudokuStrategyInstance(new JuniorExocetStrategy(),
            "0m0641guie11imii81g1969m8ma6ag097i7g21099m41o6oggmhihg56n636oc0hu8q2raj881n03gg8m803igjo050mi60911q4q041qiig4ec6g121caco11co4o580hb0o8t805q0u8035af2b2oqtasoqg05mo",
            "- 211 212 224 237 824 937 114 115 117 118 123122 128 133 135 414 417 418" +
            "423 428 429 433 436 141142148 191 192 195 458 496 499");
    }

    [Test]
    public void JuniorExocetTest5()
    {
        TestSudokuStrategyInstance(new JuniorExocetStrategy(),
            "0s4s81ku11kiksikm803215sksscsglspkt81sg15s21cccg039kd82s0ug1116a6i812662419m3kgiq2qih409j2b89a38kaua05l0j20hrk9k3kg6i609hg4182hs5s0381k4l021hgh8r8d878k20hn2h88205",
            "- 924 927 527 212");
    }

    #endregion

    [Test]
    public void GurthTheoremTest()
    {
        TestSudokuStrategyInstance(new GurthTheorem(SudokuSymmetry.All()), 
            "egu0ogloko03j8p805e2u609l4k4d4j20hr08i11omgs218k41oao83q2e1m81gm2kjo41jo3i2641gmgm0981h4jgg1ac8k4k116k2o0c035aka215q815g05haho9a0hp2210e14hapa4105ca925q4qg11q219o",
            "- 611 711 122 622 722 922 133 933 155 955 666 766 188 388 588 988 399 599");
    }

    #region AntiGurthTheorem

    [Test]
    public void AntiGurthTheoremTest1()
    {
        TestSudokuStrategyInstance(new AntiGurthTheorem(SudokuSymmetry.All()),
            "8109gg0641g60i112103n0n03c0hjcc8s4scign0053aga814qkgk82c6468fc8c7cg1030hism4mofuoenuf8e4dc1103816sgcms68644c28b03ag18a4q05egd0icq4i8cs114segug03410hh28621069009p0",
            "- 999");
    }
    
    [Test]
    public void AntiGurthTheoremTest2()
    {
        TestSudokuStrategyInstance(new AntiGurthTheorem(SudokuSymmetry.All()),
            "811g030509702gg17g0s41hkj2i2j22u1u8121h8h4l2810h0e5e50g18qegea626e11ci6g1105e00h6262g1c2090q8qegua11maaici050kpg09n0m0n08k9k0341pipgha05ha8o21hg0621h4ha0h81411ch0",
            "- 999");
    }

    #endregion

    [Test]
    public void MultiSectorLockedSetsBatchTest()
    {
        _solver.StrategyManager.AddStrategy(new MultiSectorLockedSetsStrategy(
            new RowsAndColumnsSearcher(3, 5, 1)));
        
        foreach (var line in MSLSBank.Split('\n', StringSplitOptions.RemoveEmptyEntries))
        {
            _solver.SetSudoku(SudokuTranslator.TranslateLineFormat(line));
            _solver.Solve(true);

            if (_solver.Steps.Count == 0) Console.WriteLine(line);
            Assert.That(_solver.Steps, Has.Count.GreaterThan(0));
        }
    }

    [Test]
    public void XWingTest()
    {
        TestSudokuStrategyInstance(new XWingStrategy(),
            "03c848csc4cs1121g10hg105481121034881c8112103c0g1050h485848g1210h4481140350210hs403c4k81448050381k0091121k00hc80h4811s4cck80321g1c811c821030hc805210503cos0cok8s811",
            "- 714 754 784 794 788 798");
    }

    [Test]
    public void BUGTest()
    {
        TestSudokuStrategyInstance(new BUGStrategy(5),
            "030h0581g11141210950o021054g09gg039050o00921034ggg90058121410305g1091g1g0911030h60608105g1g1050h110981214103214190091g0305g18g050990g13g2g038g410h03g1418105110921",
            "+ 485");
    }

    [Test]
    public void AlignedPairExclusionTest()
    {
        TestSudokuStrategyInstance(new AlignedPairExclusionStrategy(5),
            "b0g141039409a40h94b00996940hh441i6p69g0m962141h4o4g609054109g1030h118121g181211c1441030c0h03110h0c2181gcgc41410k949kg103as2c848g0mg14109218k11860921969k9414ok41o6",
            "- 873");
    }

    #region Distributed Disjoint Subset

    [Test]
    public void DDSTest1()
    {
        TestSudokuStrategyInstance(new DistributedDisjointSubsetStrategy(8),
            "0hj0a6t009c21474n04eh8062146hg815choecj8a4tgc4tg1o7c032e2o0mc811ea0cg1c80e81h0gg42kq215e582a41h005a2qa1o9a9oa02gag03g105411818110309c0e0e0g10h05g10541180h1803a0a0",
            "- 518 519 919 632 734 834 341 346 349");
    }

    [Test]
    public void DDSTest2()
    {
        TestSudokuStrategyInstance(new DistributedDisjointSubsetStrategy(8),
            "0h4184o4o2g6112109g134a4bcb82c03410h0330093g412gg10581812gg17g306g090305050o4103g8go218111280311280581410hg1282c0ia4a2118kg14141g124ac0h2c84110311810ik4g2k60k0921",
            "- 223 814 175 672 356");
    }

    #endregion
    
    #region BlossomLoop

    /// <summary>
    /// Total: 4,3730812 s
    /// Average: 218,65406 ms
    /// Minimum: 207,6789 ms on try #21
    /// Maximum: 264,5438 ms on try #13
    /// Ignored: 1
    /// </summary>
    [Test]
    public void BlossomLoopSpeedTest()
    {
        TestSudokuStrategySpeed(new BlossomLoopStrategy(new BLLoopFinderV3(12), new BLBranchFinderV1(), new CellType()),
            "2105090hh0o2124192og03og94418409akb4cg4g11aea88e0i0mg10i2105g11o0o811241s009s2d694c6i2j60h114gsic68k21g2090609114ie0qgsg05qga24kg14gec03cs7gagb84m81214cgs11kigi0a",
            20);
    }

    [Test]
    public void BlossomLoopTest1()
    {
        TestSudokuStrategyInstance(new BlossomLoopStrategy(new BLLoopFinderV3(12), new BLBranchFinderV1(), new CellType()),
            "2105090hh0o2124192og03og94418409akb4cg4g11aea88e0i0mg10i2105g11o0o811241s009s2d694c6i2j60h114gsic68k21g2090609114ie0qgsg05qga24kg14gec03cs7gagb84m81214cgs11kigi0a",
            "- 228 431 463 689 889");
    }

    [Test]
    public void BlossomLoopTest2()
    {
        TestSudokuStrategyInstance(new BlossomLoopStrategy(new BLLoopFinderV3(12), new BLBranchFinderV1(), new UnitType()),
            "p2b2090hj2i241j494l205k0h2ja81hoj81o0hb0i005j841h80398210o0i12410m811cg1g441g2p2p009210h16o68q1121gggk0a4c46521i81ga05gihql821093i0541iiiihi811i42g16i88ai1105484o",
            "- 328 269 171 172 378 182 793");
    }
    
    #endregion

    #region XYZRing

    [Test]
    public void XYZRingTest1()
    {
        TestSudokuStrategyInstance(new XYZRingStrategy(),
            "2a052gga11i841gq81110o41gegc810q21gg2a81g10h6868110a050hg109810311054121052111g8koko81go0381410321gsgs0o11gg411i81h4ikik2i0m09g10q2g41812s2i0m11281o05182o03g18141",
            "- 472 482 395");
    }

    [Test]
    public void XYZRingTest2()
    {
        TestSudokuStrategyInstance(new XYZRingStrategy(),
            "2a052gga11i841gq81110o41gegc810i21gg2a81g10h6868110a050hg109810311054121052111g8koko81gg0381410321gkgk0911gg411281h4ikik2i0m09g10a2g41812s2i0m11281o05182g03g18141",
            "- 686 177");
    }

    [Test]
    public void XYZRingTest3()
    {
        TestSudokuStrategyInstance(new XYZRingStrategy(),
            "g105dg215i4i920982f003f0180548b00hg1093g3g811ig14105220ha0a20cg11122410c7409720m6g6gg1812m6460g10u81682i112u03cgcgg1098g052111b0g1091g3g058g0341b0bg05413iai09g18g",
            "- 661 667 669");
    }

    #endregion
    
    #region UniquenessClueCover

    [Test]
    public void UCCTest1()
    {
        TestSudokuStrategyInstance(new UniquenessClueCoverStrategy(BandCollection.FullCollection()),
            "duumuojstgtceivajadquiuojotgt8eiva05dsukuo03tgtcegv8j8c4u403h009p0640hj08kok1141oi2109g6g24g09mghg05h262n281cqci05g821ka118a0a21114881424eg10e0hg182881c120ha6ae41",
            "- 314 414 514 614 914 319 619 519 919");
    }

    [Test]
    public void UCCTest2()
    {
        TestSudokuStrategyInstance(new UniquenessClueCoverStrategy(BandCollection.FullCollection()),
            "rqmauidgmq05r8toj0rsm8ugdgmo3orcts03rumauidgmq3qrctsj4i2m20509c2920hp0j0gog811218k8go403412i816i5g4mg1341409i20hi20528411a1881a0110903agag41g4g4410582g111880a210h",
            "- 336 436 536 636 539 639 939");
    }
    
    #endregion

    #region Thor's Hammer

    [Test]
    public void ThorsHammerTest()
    {
        TestSudokuStrategyInstance(new ThorsHammerStrategy(new TwoByTwoLoopFinder()),
            "q2q009q00541o2110h1141q00hq003o00509o2050h0911o0o24121410hh00309h42181g4q0q003410hq41109g40509r0q0q0r0410h03i01105i0410h09038109q0410503q00hi0110h03q011q00905i041",
            new NumericChange(ChangeType.SolutionAddition, 1, 2, 0));
    }

    [Test]
    public void ThorsHammerListTest()
    {
        _solver.StrategyManager.AddStrategy(new HiddenSingleStrategy());
        _solver.StrategyManager.AddStrategy(new NakedSingleStrategy());
        _solver.StrategyManager.AddStrategy(new ThorsHammerStrategy(new TwoByTwoLoopFinder()));

        const string list = "...........1..2..3.3..4..56.17.8....2.87.34..34.21...8.74.38...1.342....8..1.7..4\n" +
                            ".............12.34..5..36...37...84.6.4..8..785....3.6.7....46.4.38..7.556...7.83\n" +
                            "..............1..2..3..4.56.1..73..553.41..7.7.48.5....415...8.3.71.8...85..47..3\n" +
                            "..............1..2..3..4.56.1..73...53.41..7.7.48.5....415...8.3.71.85..85..47..3\n" +
                            "..............1..2..3..4.56.1..73..553.4...7.7.48.5..1.415...8.3.71.8...85..47..3\n" +
                            "..............1..2..3..4.56..7.18....4135..8.85.4.7..3.1.7.3..553.14..7.7.4.85...\n" +
                            "..............1..2..3..4.56.1..73...53.4...7.7.48.5..1.415...8.3.71.85..85..47..3\n" +
                            "..............1..2.34...56.....578.6..62.8.7..87.1..25....762.8.7.12..5.6..8.5.17\n" +
                            "..............1..2..3..4.56.14.6..783.74.8...86..17..3.4..73...63.14...77.18.6...\n" +
                            "..............1..2..3..4.56..7.48....1463..7886.1.7..3.4.7.3...63.41...77.1.86...\n" +
                            "..............1..2..3.4..15..6.74....841.3.7.17.86...3.3841....6.1.378..74.6...3.\n" +
                            "........1.....2.....3..456..31..7.56.8..6.7.37.65..81..58..6..73.7....8.61..78.3.\n" +
                            "........1.....2.3..45...2......21.63..3.7.8.26..8.371.....67..8...2.817..8731..26\n" +
                            "..............1.23.12....45.46.17....7.8.6...8.12....6.68.724..1..6.4...42.18..67\n" +
                            "..............1.23.12....45.46.17....7.8.6..48.12....6.68.72...1..6.4...42.18..67\n" +
                            "...........1..2..3..2.4..56.17.84....5.21...82.85.7..4.75.284..12...5.8.8.41....5\n" +
                            "...........1..2..3..2.4..56.17.845...5.21...82.85.7..4.75.284..12...5.8.8.41.....\n" +
                            "..............1.23.12.3..45..6.17...73.8.62..8.132..76.63.72...17.6.....2.81.3..7";

        foreach (var line in list.Split('\n'))
        {
            if (line.Length == 0) continue;

            _solver.SetSudoku(SudokuTranslator.TranslateLineFormat(line));
            _solver.Solve();

            bool contains = false;
            foreach (var step in _solver.Steps)
            {
                if (step.Title.Equals("Thor's Hammer"))
                {
                    contains = true;
                    break;
                }
            }
            Assert.That(contains, Is.True);
        }
    }

    #endregion

    [Test]
    public void AlmostClaimingPairSpeedTest()
    {
        const string s =
            "r0v0u0l00503f00h0909l00hl02181500305b6f6e450090hf0u0v0q4u4u40hg20972m0n0i0m00381110509m00h0h091121g24186o4o0q2q2090541i00h11a2360h24098130g1646241r4q4030hj0a409a0";
        
        TestSudokuStrategySpeed(new AlmostClaimingPairStrategy(() => new ListDictionary<Cell, int>()),
            s, 20000);
        TestSudokuStrategySpeed(new AlmostClaimingPairStrategy(() => new CandidateListMultiDictionary()),
            s, 20000);
    }

    private void TestSudokuStrategyInstance(SudokuStrategy strategy, string stateBefore32, string expectedAsString)
    {
        List<NumericChange> progresses = new();

        var type = ChangeType.PossibilityRemoval;
        int[] d = { -1, -1, -1 };
        int cursor = 0;
        foreach (var c in expectedAsString)
        {
            switch (c)
            {
                case '-' : type = ChangeType.PossibilityRemoval;
                    break;
                case '+' : type = ChangeType.SolutionAddition;
                    break;
                case ' ' : break;
                default:
                    var n = c - '0';
                    d[cursor++] = n;

                    if (cursor == 3)
                    {
                        progresses.Add(new NumericChange(type, d[0], d[1] - 1, d[2] - 1));
                        cursor = 0;
                    }

                    break;
            }
        }
        
        TestSudokuStrategyInstance(strategy, stateBefore32, progresses.ToArray());
    }

    private void TestSudokuStrategyInstance(SudokuStrategy strategy, string stateBefore32, params NumericChange[] expected)
    {
        strategy.InstanceHandling = InstanceHandling.UnorderedAll;
        _solver.StrategyManager.AddStrategy(strategy);
        _solver.SetState(SudokuTranslator.TranslateBase32Format(stateBefore32, DefaultBase32Alphabet.Instance));
        _solver.Solve(true);

        List<NumericChange> progresses = new();
        foreach (var log in _solver.Steps)
        {
            progresses.AddRange(log.Changes);
        }
        
        Assert.Multiple(() =>
        {
            foreach (var progress in expected)
            {
                Assert.That(progresses, Does.Contain(progress));
            }
        });
    }

    private void TestSudokuStrategySpeed(SudokuStrategy strategy, string stateBefore32, int count)
    {
        if (!AllowSpeedTests)
        {
            Console.WriteLine("Speed test not allowed");
            return;
        }

        _solver.StrategyManager.AddStrategy(strategy);
        strategy.InstanceHandling = InstanceHandling.UnorderedAll;
        
        var stopWatch = new Stopwatch();
        var result = new SpeedTestResult();
        var nanosPerTick = 1000L * 1000L * 1000L / Stopwatch.Frequency;
        var state = SudokuTranslator.TranslateBase32Format(stateBefore32,
            DefaultBase32Alphabet.Instance);

        for (int n = 0; n <= count; n++)
        {
            _solver.SetState(state);
            
            stopWatch.Restart();
            _solver.Solve(true);
            stopWatch.Stop();

            result.AddEntry(n, stopWatch.ElapsedTicks);
        }

        result.ToConsole(nanosPerTick, count);
    }

    private const string MSLSBank =
        ".....67...5.1...3...9.2...42..........8.4...29.46..........7.6....3..1..8.......5\n" +
        "........9...78..2...81.2....3.5..6..5....7..4..7.2......1.7..9.6.......5.4....3..\n" +
        "98.7..6....5.4.........9.3.6......9..3....8....2.7...5.5.........1.27......4.1..7\n" +
        "..34...8......92..6...3.......8..4.......2.9..7..1...6.1.......5...7...176....9..\n" +
        "1.........5.....36....3.5.4.1..6.3....82.....9....7....629.8...7.......8....4.6..\n" +
        ".2....7..4...8...6..9...1...7.8..9....15...2.5....4............8...4...3....63.7.\n" +
        "3.....5...8.4...2...1.....7.4.8.6........9.8.......2.4.....73...6.9.....5.7.....1\n" +
        "..3.5....4....9....8.2....1..5.34......8....69.....3.....7..81..1....6.7..2......\n" +
        "98.7.....7.6...9......5....4......3..6.5.........24..1.9.8..5......3..92.....1.4.\n" +
        ".......391......6...6.9......8.3...6.7...45...1.2.........8..5..4.7.....2....18..\n" +
        "1.....5...8.4...2...3.....7.4.8.6........9.6.......2.4.....73...2.9.....5.7.....1\n" +
        "1.....5...8.4...2...3.....7.4.8.9........6.8.......2.4.....73...6.9.....5.7.....1\n" +
        "98.7..6..7.5.......6..8....6...7.4.....3...5......2..1.9....8....4..5..2...1...3.\n" +
        ".......93.....81....3.16...4.......5..16..9...7.....2..5..6...72....7.4....8..3..\n" +
        "...2............85..6.5......8.3...9.7...23..1..4..6....9....3..2.7..9..4....1...\n" +
        "98.7.....7.6...8.........754...3..2...9...6.......1..4..79..5......4...1.....2.3.\n" +
        ".......8..2.....69..9.8........7...6.1.2..7..5....43....6.9..3.2..1......4...5...\n" +
        "98.7.....6.....8....5....747...5..3...69..........2..1..96..4......1...5.....3.2.\n" +
        "98.7.....6.7...8......5....4...3..2..7....9.......1..4.9.6..5....8.2..3......4..1\n" +
        "98.7.....7.6...8......5....4....3.2..9..1...4..7...9....95..6......2...3.....4.1.\n" +
        "98.7.....7.6...9......5....4...3..2..7...1..4..9...8....75..6......4...1.....2.3.\n" +
        "98.7..6..7...9..8..5.......5...8..9....4....6.....32...7..1......1..2..4...6..3..\n" +
        "98.76....5.............98..7....85.....6...4.....3...2.9....1....72...6...1.4...3\n" +
        "98.76....7....58...5.......5.....4....4.3..2....1....6.7...89.....6....3....2..1.\n" +
        "98.7.....7.6...8......5....4....3.2..9..1...4..7..59....95..6......2..3......4..1\n" +
        "98.7.....6.7...8......85...4...3..2..9....6.......1..4.6.5..9......4...3.....2.1.\n" +
        "98.7.....7.6...8......5....4...3..2..9...1..4..8...6....95..7......4...1.....2.3.\n" +
        "98.7.....7.6...8......85...4....3.2..6....9......1...4.7.5..6......2..1......4..3\n" +
        "98.7.....7.6...8......5....4...3..2..9...1..4..8...5....96..7......4...1.....2.3.\n" +
        "98.7.....7.6...8.........5.4...3...2..89..........4.1...76..5......1..3......2..4\n" +
        "98.7.....7.6...8.........5.4...3...2.7...1.4...9...6....79..5......4..1......2..3\n" +
        "98.7.......6...9.........758..5..7...6..4...3.....2.1.6..9......1...3..2....1..4.\n" +
        "98.7.....6.7...8......5....4....3.2...6...9......1...4..98..5......2...1.....4.3.\n" +
        "98.7.....7.6...8......5....4......3..9.6.........24..1.6.9..5......3..4......1..2\n" +
        "98.7.....7.6...8......5....4...3..2..7.6..........4..1.6.9..5......1..4......2..3\n" +
        "98.7.....7.6...8......5....4....3.2..7....6......1...4.9.5..7......4...1.....2.3.\n" +
        "98.7.....7.6...9......5....4......3...85.........42..1..76..8......3..2......1..4\n" +
        "98.7.....7.6...9......5....4....3.2...7...6......1...4..86..5......4...1.....2.3.\n" +
        "98.7.......6...9.........754...3...2.6....5.......1.4..9.5..8......2..3......4..1\n" +
        "98.7.......6...9......5..7.4....3.2..6.5.........4...1.9.8..5......2...4.....1.3.\n" +
        "98.7.....6...5.8.......8...5...6.9.....4...3......7..2.9....1....5..2.4...13....7\n" +
        "98.7.....6.7...8......5....4....3.2..6....9....9.1...4.9.5..7....6..4..3....2..1.\n" +
        "98.7.....6.7...8......5....4....3.2..6...59....9.1...4.9.5..7......2..1......4..3\n" +
        "98.7.....7...6.........97..5.....4.....3...6.....2...1.7...85....56....3..4.1..2.\n" +
        "98.7.....7...6.........97..5....48.....6...3.....2...1.9....5....5.3...6..41...2.\n" +
        "98.7.....7.6...8......5....4...3..2..9.6..........4..1.6.5..7......2..4......1..3\n" +
        "98.7.....7.6...8......5....4...3..2..9.6..........4..1.6.9..5......1...4.....2.3.\n" +
        "98.7.....7.6...9......5....4....3.2..6.8.........4...1.7.9..5......1..3......2..4\n" +
        "98.7.....7.6...9......5....4....3.2..6.8.......9.4...1.9.5..8......1..4......2..3\n" +
        "98.7.....7.6...9......5....4....3.2..7....5......1...4.6.9..8......2...3.....4.1.\n" +
        "98.7..6....5.4.........9.3.3....6..9.4.5.......7.8....2....1..3.7.....92.......1.\n" +
        "98.7..6....59...4.....3...92....9..7.4.....5...6...8..1....2..3.6...31......1....\n" +
        ".......12.....3..4..4.2......1.....5.3...6...7..8..9....5.9..4..8.7.5...6..3..5..\n" +
        ".......12.....3..4..4.2......1.....5.3...6...7..8..9....5.9..4..8.3.5...6..7..5..\n" +
        "........1.....2..3..3.1..4...4.....5.2...67..8..9.......5.7..3..9.2..5..6..5.8...\n" +
        "........1....12.3...1.4.2....2.5.1...6......37......8...9..4....3.5...6.8..9....7\n" +
        ".......12....34..5..51..6....23...6..7...8...9...4......6....2..8..7.5..4....9..6\n" +
        "..............1.23..2.3...4..5....4..1...6...7..8..5....9.2...5.6...79..8..1.....\n" +
        "..............1.23..2..4..5..5..3..6.1..7....8...9......6....3..9.8..6..7...1.4..\n" +
        "........1....23.4...21.5.....1.5...4.6....7..8..4...9...3.1.....7.9...6.9.....8..\n" +
        "........1.....2.34..4.1..5...3....1..2.6.....7....8.....9.4...5.8.2..9..6....7...\n" +
        "........1....23.4...24.5.......5..3..6...78..9..3....7..4.3..1..7......98.....6..\n" +
        "........1....23.4...24.5.....35..1...6...78..7...3...9..53...1..8......69.....7..\n" +
        "........1.....2.34..1.4..5...5.3..1..6.2.....71.8.......9.....5.8...69..2..7.....\n" +
        "........1.....2.34..1.4..5....6.......7.3..1.89.2.......3.....5.2.9.....6....87..\n" +
        "........1....23.4...24.5.....3.5..1..6....7..8..2....9..5.4.....7....8..9....7..6\n" +
        "........1....23.4...24.5.....3.4.....6....7..8....6..9..5.3..1..9....6..7..2....8\n" +
        "........1....23.4...24.5.....3.4.....6....7..8....6..9..5.3..1..7....6..9..2....8\n" +
        "........1.....2.34..1.4..5...3.....5.2.6.....7....89....9.3..1..6.7.....8..2..5..\n" +
        "........1.....2.34..1.4..5...5.3..1..6.2..5..7..8.......9.....5.8...69..2..7.....\n" +
        "........1.....2.34..3.4..5...4.3..1..6...7...8..2..9....9.....5.7.6.....2....81..\n" +
        "........1.....2.34..3.4..5...1.....5.2...61..7..8.......9.3..1..6.2..9..8....7...\n" +
        "........1.....2.34..3.4..5...4.1...5.6...7...8..2.......9....1..2.6..9..7....85..\n" +
        "........1.....2.34..3.4..5...1.....5.2.6.....7....8.....9.3..1..6...75..8..2..9..\n" +
        ".......12.....34....1.45......3..5...6...4..78...7..9...54..2...7.....8.9.......6\n" +
        "........1....23.4...245.........4.5..6......78...7.9....3..5.1..7....8..9..2....6\n" +
        "........1....23.4...245.........4.5..6..7.8..9..5....7..3..5.1..8......97.....6..\n" +
        "........1....23.4...245......1..4.3..6....7..8..5....9..3..5....9....6..7...9...8\n" +
        "........1.....2.34..3.4..5...5.....3.2...6...7..8.......9.5..1..8...79..6..2..3..\n" +
        "........1.....2.34..3.4..5...4.....3.2...6...7..8.......9.5..1..8...73..6..2..9..\n" +
        ".......12....134....145......3..5....6......78...6..9...4..12...7.....6.9..5....8\n" +
        "........1.....2.34..1.3..5...3.1..4..6.2.....7..8..9....9.....5.8.7.....2....6...\n" +
        "........1....23.4...25.4.....34......6......78....69....53...1..9......87...4.6..\n" +
        "........1.....2.34..1.4..5...5.3..1..6...7...8..2.......9.....3.7...6...2..8..9..\n" +
        "........1....23.4...25.4.......5..3..6...78..9..4....7..3.4..1..7....6..8.......9\n" +
        "........1....23.4...25.4.....1.3..5..6....7..8..4....9..3.4.....7......69....78..\n" +
        "........1....23.4...56..7.......1.2..8..4...39..8.......67..9..5.......77.9....1.\n" +
        "........1....23.4...25.4.......3..5..6......78....79....1.4..2..9....8..7..3....6\n" +
        "........1.....2.34..1.4..5...4.5..1..6.2.....71.8.......9.....3.8...79..2..6.....\n" +
        "........1....23.4...25.4.....13...5..6......78...4.9....34......7....8..9....7..6\n" +
        "........1....23.4...25.4......4...3..6....7..8....7..9..53...1..7......69...4.8..\n" +
        "........1....23.4...25.4......4...3..6....7..8....7..9..53...1..7..4...69.....8..\n" +
        "........1.....2.34..4.3..5...5....1..2.6.....7....8.....9.4...3.6...79..8..29....\n" +
        "........1.....2.34..3.1..5...4.....3.2.6.....7....89....9.4..1..8...7...6..2.....\n" +
        "........1.....2.34..3.4..5...5.....3.2...67..8..9.......7.5..1.56.2.....9....8...\n" +
        "........1....23.4...25.4......4...3..6...7..89...3.7....53...1..8....6..7.......9\n" +
        "........1.....2.34..3.1..5...4.....3.2.6..7..8....9.....7.5..1..9.2.....6....83..\n" +
        "........1.....2.34..1.3..5...3....4..2...67..8..9..5....4.7...5.9.2.....6....8...\n" +
        "........1.....2.34..4.1..5......6.....1.3..4.78.2.......9.....3.2.8..9..6....7...\n" +
        "........1....23.4...254.........5.1..6..7.8..9..2....7..3..2.5..7......98.....6..\n" +
        "........1....23.4...254.........5.3..6......78...7.9....5..2.1..9......87..4..6..\n" +
        "........1.....2.34..3.1..5...5.6..4..7...86..9..2.......6.....3.8.9.....23...7...\n" +
        "........1.....2.34..1.4..5...5....4..2...67..8..9.......7.5...3.9.2.....6....8...\n" +
        "........1....23.4...56..7.......1.2..8..4...39..8.......79..5..5.9.....46......9.\n" +
        "........1....23.4...56..7.......1.2..8..4...39..8.......69..5..5.9.....47......9.\n" +
        "........1.....2.34..3.4..5...1.5..4..6...78..9..2.......8.....3.2...65..7..9.....\n" +
        "........1.....2.34..3.1..5...1.....3.2...6...7..8.......9.5..4..8.2..9..6..7..3..\n" +
        "........1.....2.34..3.1..5...1.....3.2...6...7..8.......9.5..4..8.2..9..6....73..\n" +
        ".......12.....34....1.45......5..3...6.....7.8...71..9..24..1...7......89......6.\n" +
        ".......12.....34....1.54.....25..1...6......78......9...34......7......89...72.6.\n" +
        ".......12.....34....1.54.....25..1...6......78......9...34......9......87...92.6.\n" +
        "........1....23.4...24.5........6..7..35.....68..4.9....12...3..9....6..7.......8\n" +
        ".......12.....34....1.54........6..7..53.....68..4..9...24..5...7.....8.9.......6\n" +
        "........1....23.4...254.........5.3..6..7....8..2..9.7..3..2.1..7....6..9.......8\n" +
        "........1....23.4...245......3..2.1..6......78.....9....5..4....7......89..27.6..\n" +
        ".......12.....3..4..4.2......5..1..6.3.7.....8....9.....6.1..4..9...85..7..3..6..\n" +
        "........1.....2.34..4.3..5...5..1..3.2...6...7..8..9....9.1..4..6...7...8..2.....\n" +
        "........1.....2.34..4.3..5...5..1..3.2...67..8..9.......7.1..4..9.2.....6....8...\n" +
        "........1.....2.34..3.1..5...5.4...3.6...7...8..2.......9..4.1..2...6...7..8..9..\n" +
        "........1.....2.34..4.3..5...5.4..1..6...7...8..2.......9..4..3.2...8...7..6..9..\n" +
        "........1.....2.34..4.3..5...5.4..1..6...7...8..2.......9..4..3.7...6...2..8..9..\n" +
        "........1.....2..3..4.3..5...3..5..4.2...6...7..8.......9.5..1..8.2..9..6....74..\n" +
        "........1.....2.34..3.4..5...4..5..3.2...6...7..8.......9.5..1..8...7...6..2..9..\n" +
        "........1....23.4...245.........5.3..6......78..37.9....5..2.1..9....8..7.......6\n" +
        "........1....23.4...25.4......4...3..6....7..8...37..9..53...1..7......69.....8..\n" +
        "........1....23.4...245.........4.3..6.3..7..8.3.7...9..1..2.5..9....6..7.......8\n" +
        "........1.....2..3..4.3..5...1.5...4.6...71..8..2.......9....1..7.8..9..2...964..\n" +
        ".......12.....34....145......3..5.2..6......78...6..9...4..12...7.....6.9..5....8\n" +
        "........1.....2.34..1.3......5....4..2..567..8..9..5....7.4...5.6.2.....9....8...\n" +
        "........1.....1.23..123..4...4.1..3..5...6...7..8.......9.....2.8...79..6..5.....\n" +
        "........1....23.4...25.4.....32...1..6......78.....9....54..1...9.3..6..7...5...8\n" +
        "...........1..2..3.2..3.45.....4......4.5..16.5.2..3.....3....7.3...452.8..59....\n" +
        "........1..2..3....4..5..23.....5.1..6.4..7..8...9.5....1..2..7.9..6....4..8.....\n" +
        "........1.....2.34..3.4..5...5.....3.6.7.....23...89....9.5..1..7...6...8..2.....\n" +
        "........1.....2.34..4.3..5...5....1..2.6.....7....8.....9.4...3.6.3.79..8..2.....\n" +
        "........1.....2.3...3.1..4...1.4..5..6...7...8..2.......9.....4.7.6..9..2....857.\n" +
        "..............1.23..2.3..4...3.4..5..6...7...8..1.......9.....4.7.6..9..1....857.\n" +
        "........1....23.4...254......13......3..6...768...49....34...5..7....6..9.......8\n" +
        "........1.....2.34..4.1..5...163..4..6.2.....7....8.....9.....3.8...6...2..7..9..\n" +
        "........1.....2.34..4.1..5...1.36..5.6...7...8..2.......9....4..7.6.....2....89..\n" +
        "........1.....2.34..4.3..5...3.46..5.6...7...8..2.......9....1..7.6..9..2....8...\n" +
        "........1....23.4...25.4......3...1..6......78....79....54...3..9......67....18..\n" +
        "........1....23.4...25.4.....14...5..6......78....19....53......9...7..87.....6..\n" +
        "........1....23.4...245.........5.3..6......78...7.9....5..2.1..9..1...87.....6..\n" +
        "........1....23.4...245.........5.3..6......78...7.9....5..2.1..9....8..7...1...6\n" +
        "........1....23.4...25.4.....13...5..6......78....19....34......7...9..89.....6..\n" +
        "........1....23.4...25.4.....13...5..6......78....19....34......9...7..67.....8..\n" +
        "........1....23.4...25.4.....13...5..6...17..83......9..34......7......89....76..\n" +
        "..............1.23..2.3..4...4.2..5..6...7...8..1.......9.....4.7.8..9..14...65..\n" +
        ".......12.....34....1.54......5..3...6...7..18...4..79..24..1...9......87......6.\n" +
        ".......12.....34....1.54......5..3...6...7..18...4..97..24..1...7......89......6.\n" +
        ".......12.....34....1.54......5..3...6...7..18...4..97..24..1...9......87......6.\n" +
        "........1.....2.34..1.34.5...5..1.4..2..6....7..8.......9.....3.8..7....6..2..9..\n" +
        ".......12.....3..4..4.2......5.....6.3.7.....8....9.....6.1..4..9.6.85..7..3..6..\n" +
        "........1.....2..3..3.1..4...5.....6.2...7...8..9.......6.4..3..9.2..6..7..6.85..\n" +
        "........1.....2.3..34.5.2.........6..25..37..8..5......572..3...8..47..29...3....\n" +
        "........1.....2.3..34.1.5.....6......15.7...38......5..57.3..1..8...14.79........\n" +
        "........1.....2.34..4.3..5...3.....5.2...6.7.7..8..9....5.9..1..6.2.....8....7...\n" +
        "........1.....2.34..4.1.52...3.4...2.6...5...7..8.......9....1..8...7...5..6..9..\n" +
        "........1.....1.23..1.3.45...5....3..4...6...7..8..9....9.1...2.8.7.....6....4...\n" +
        "........1..2..3....1..4..32..3..2..5.6.4.....7...8......9....1..4..6.5..8..7..9..\n" +
        "........1....23.4...245......15...2..6....7..8...3...9..43......9..7...67.....8..\n" +
        "........1....23.4...245.........5.3..6......78...7.9....5..2.1..9..4...87.....6..\n" +
        "........1....23.4...245.........5.3..6......78...7.9....5..2.1..9......87...4.6..\n" +
        "........1....23.4...25.4.....3.5.....6....7..8....6..9..5.4..1..9......67....58..\n" +
        "........1....23.4...254......13......6......78...6.9....42...5..7..3.8..9.......6\n" +
        "........1....23.4...245......1..5.3..6....7..8...4...9..5..2....9......87...9.6..\n" +
        "........1....23.4...25.4......4...3..6....7..8....7..9..53...1..7...2..69.....8..\n" +
        "........1.....2.3...3.1..4...5....6..2.7.....8....9.....6.3...4.7.2.65..9....86..\n" +
        ".......12.....34....1.54......5..3...6...7...8...4..79..24..1...7...5..69......8.\n" +
        "........1....23.4...245.........4.3..6....7..8..27...9..1..2.5..9....6..7...4...8\n" +
        "........1....23.4...245.........4.5..6..7.8..9..5...67..1..5.3..7....9..8.......6\n" +
        ".................1..2.34.5...3.6.7...4..25.6.5.6.......248......3.9....46....2.3.\n" +
        "........1.....2.....3.4..5........6...43..5.7.6..5...4..5.6..3..8...59..9...3..4.\n" +
        "...........1..2..3.3..4..21..2..1..5.6.4.....7...8......9....3..4..7.5..8..6..9..\n" +
        "........1....23.4...245.........5.3..6......78...7.9....5..2.1..9......87...3.6..\n" +
        "........1....23.4...245.........5.3..6......78...7.9....1..2.5..9......87...3.6..\n" +
        "........1.....2.34..1.3..5...3.....5.2...6.7.7..8..9....5.9..4..6.2.....8....7...\n" +
        "........1.....2.34..3.1..5...5.4...3.6...78..9..2.......8....1..2...6..77..9.....\n" +
        ".......12.....3..4..1.2.53...2.4...3.6...7...8..5.......9....4..5.6..9..7....8...\n" +
        "........1.....2.34..3.4.52...4.3...2.5...6...7..8.......9....1..8.5.....6....79..\n" +
        //"........1.....2....34.1..5......1.35.56.4.1..7......46...8.6....61.5...49........\n" +
        //"........1.....2....13.4..5......6.47.45.3.1..1......35...8.1....51.7...497.......\n" +
        ".................1..2.34.5...36......4.7....38...2..4..3..52.8.2.4..89..5.8......\n" +
        //"........1.....2....13.4..5......6.47.45.3.1..1......35...8.1....5..7...497.....1.\n" +
        //"........1.....2....13.4..5......6.47.45.3.1..1......35...8......51.7...497.....1.\n" +
        "........1....23.45..41.......5....1..2...63..7...8.9....94....3.6...2...8...7....\n" +
        "........1....23.45..41.......54....2.6...7...8...3......9....1..7..6.9..3....82..\n" +
        "........1....23.45..51.......24...5..6..327..8...9.2....7.....2.3..8....9....6...\n" +
        "........1....23.45..51.......45....2.6...7...8...3......9....1..7..8.9..3....62..\n" +
        "........1....23.45..51.......45....2.6...7...8...3......9....1..7..6.9..3....82..\n" +
        "........1....23.45..54.......45....2.6...7...8...3......9....1..7..6.9..3....82..\n" +
        "........1.....2.34..3.4..5......6.....7.3..4.89.2.4.....1.....5.2.9.....6....87..\n" +
        ".......12.....3..4..4.2......5.....6.3...7..88..9.......6.1..2..9...86..7..3..5..\n" +
        "........1....23.4...25.4.....3.5.....6...17..8....6..9..5.4..1..9......67.....8..\n" +
        ".............12.34..1.5.2....2.3.1...6......78......4...9..5....7.9...6.4..3....8\n" +
        "........1....23.4...245......35......6..7...875..1.9....52...1..9......78.....6..\n" +
        "........1....23.4...24.5.....3.5..1..6......78.....9....5.4.....7...98..9....2..6\n" +
        "........1....23.4...25.4.......5..3..6...2..78....79....3.4..1..9......67.....8..\n" +
        "........1....23.4...24.5.....3.4.....6...27..8....6..9..5.3..1..9....6..7.......8\n" +
        "........1....23.4...24.5.....4.3..1..6......78.....9....5.4.....7...98..9....2..6\n" +
        "........1....23.4...24.5.....1.3..5..6......78.....9....3.4.....7...9..69....28..\n" +
        "........1....23.4...24.5......3...5..6...4..78....79....15...3..7....6..9.......8\n" +
        "........1....23.4...245......3..5....6..3...78...6.9....4..2.1..7....6..9.......8\n" +
        "........1....23.4...245.........5.3..6..3...78...7.9....5..2.1..9......87.....6..\n" +
        "........1....23.4...245.........5.3..6..3...78...7.9....5..2.1..9....8..7.......6\n" +
        "........1....23.4...25.4.....3.4.....6...2..78....69....5.3..1..7....6..9.......8\n" +
        "........1....23.4...25.4.....1.3..5..6......78.....9....3.4.....7...96..9....2..8\n" +
        "........1....23.4...245......1..5.3..6......78.....9....5..2....9..7.8..7...3...6\n" +
        "........1....23.4...25.4.....13...5..6......78.....9....34......7...9..89....56..\n" +
        "........1....23.4...25.4.....34..1...6...5..78....69....53...1..7....6..9.......8\n" +
        "........1....23.4...245.........4.3..6....7..8.327...9..1..2.5..9....6..7.......8\n" +
        "........1.....2.34..3.41.5...1.5..4..6...78..9..2.......8..5..3.2...6...7..9.....\n";
        //"..............1..2..2.3.45...4.....6.25..4..78...5.2....8.......4..2.38.5.39.....\n" +
        //"..............1..2..2.3.45...4........5..4.16.3..5.2...23.....7.589.....4...2.53.\n" +
        //"..............1234..2.5.6....3...76..47.3...262..78..3.764....828.....7.3.4..7.26\n" +
        //"..............1..2..3.4..15.341....6.7.38..418.1.6...7.478.....16.4.3.7.3.8.76...\n" +
        //"..............1..2..3.4..15.341.6..7.7.38..418.1.7...6.478.....16.4.3.7.3.8.67...";
}